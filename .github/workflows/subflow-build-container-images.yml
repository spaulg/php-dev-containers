name: 'Build container images'

on:
  workflow_call:
    inputs:
      matrix:
        type: string
        description: 'JSON encoded matrix for versions to build'
        required: true

      distribution:
        type: string
        description: 'Debian distribution to target'
        required: true

      push:
        type: boolean
        description: 'Push the build to Docker Hub'
        required: false
        default: false

    secrets:
      DOCKERHUB_USERNAME: { required: true}
      DOCKERHUB_TOKEN: { required: true}

env:
  DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}

jobs:
  build_images:
    name: PHP ${{ matrix.short_sem_version }}
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    strategy:
      fail-fast: false
      matrix: ${{fromJSON(inputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: dagger/go.mod
          cache-dependency-path: "**/*.sum"

      - name: Install Dagger CLI
        run: |
          engine_version=$(jq -r '.engineVersion' < dagger.json | sed 's/v//')
          cd /usr/local && { curl -sSfL https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=$engine_version sh; cd -; }
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Define source directory path
        id: define_paths
        shell: bash
        run: |
          echo "source_path=dagger/assets/source/${{ matrix.short_version }}" >> "$GITHUB_OUTPUT"

      - name: Ensure work directory exists
        shell: bash
        run: |
          mkdir -p work

      - name: Downloading PHP source
        shell: bash
        run: |
          dagger call --version ${{ matrix.full_sem_version }} --distribution ${{ inputs.distribution }} \
            download-php-source \
            export --path "work/php.orig.tar.gz"

      - name: Restore package cache
        id: package_cache
        uses: actions/cache@v4
        with:
          key: "${{ inputs.distribution }}-${{ hashFiles('work/php.orig.tar.gz') }}-${{ hashFiles(steps.define_paths.outputs.source_path) }}"
          path: work/${{ matrix.full_sem_version }}

      - name: Build packages
        if: ${{ steps.package_cache.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels[*].name, '@force-rebuild') }}
        shell: bash
        run: |
          dagger call --version ${{ matrix.full_sem_version }} --distribution ${{ inputs.distribution }} \
            build-php-packages --source-archive "work/php.orig.tar.gz" --architectures amd64,arm64 \
            export --path "work/${{ matrix.full_sem_version }}"

      - name: Build and push container image
        if: ${{ inputs.push }}
        shell: bash
        run: |
          dagger call --version ${{ matrix.full_sem_version }} --distribution ${{ inputs.distribution }} \
            build-php-image --package-directory "work/${{ matrix.full_sem_version }}" --architectures amd64,arm64 --push

      - name: Build container image
        if: ${{ ! inputs.push }}
        shell: bash
        run: |
          dagger call --version ${{ matrix.full_sem_version }} --distribution ${{ inputs.distribution }} \
            build-php-image --package-directory "work/${{ matrix.full_sem_version }}" --architectures amd64,arm64

      - name: Save deb files to build
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: php-${{ matrix.short_sem_version }}
          if-no-files-found: ignore
          path: |
            work/${{ matrix.full_sem_version }}/*.deb
